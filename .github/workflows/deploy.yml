name: Deploy Flask App to AWS Lambda

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # Allows manual deployment from GitHub UI

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: simple-flask-app
  LAMBDA_FUNCTION_NAME: simple-flask-app

jobs:
  deploy:
    name: Deploy to AWS Lambda
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push Docker image to ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build Docker image
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        # Push to ECR
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        # Output image URI for next step
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Update Lambda function
      env:
        IMAGE_URI: ${{ steps.build-image.outputs.image }}
      run: |
        aws lambda update-function-code \
          --function-name $LAMBDA_FUNCTION_NAME \
          --image-uri $IMAGE_URI
        
        # Wait for update to complete
        aws lambda wait function-updated \
          --function-name $LAMBDA_FUNCTION_NAME
        
        echo "âœ… Lambda function updated successfully!"
        echo "ðŸš€ New image: $IMAGE_URI"